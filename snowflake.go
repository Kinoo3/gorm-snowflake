package snowflake

import (
	"database/sql"
	"fmt"
	"strconv"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/callbacks"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/logger"
	"gorm.io/gorm/migrator"
	"gorm.io/gorm/schema"

	_ "github.com/snowflakedb/gosnowflake"
)

const (
	SnowflakeDriverName = "snowflake"
)

type Dialector struct {
	*Config
}

type Config struct {
	DriverName string
	DSN        string
	Conn       gorm.ConnPool

	// For testing purposes
	CreateTableFunc   func(values ...interface{}) error
	HasTableFunc      func(value interface{}) bool
	ColumnTypesFunc   func(value interface{}) ([]gorm.ColumnType, error) // Add this
	AddColumnFunc     func(value interface{}, field string) error        // Add this
	MigrateColumnFunc func(value interface{}, field *schema.Field, columnType gorm.ColumnType) error
}

func (dialector Dialector) Name() string {
	return SnowflakeDriverName
}

func Open(dsn string) gorm.Dialector {
	return &Dialector{
		Config: &Config{
			DSN:        dsn,
			DriverName: SnowflakeDriverName,
		},
	}
}

func New(config Config) gorm.Dialector {
	return &Dialector{Config: &config}
}

func (dialector Dialector) Initialize(db *gorm.DB) (err error) {

	db.Config.NamingStrategy = NewNamingStrategy()

	callbacks.RegisterDefaultCallbacks(db, &callbacks.Config{})
	_ = db.Callback().Create().Replace("gorm:create", Create)

	dialector.DriverName = SnowflakeDriverName

	if dialector.Conn != nil {
		db.ConnPool = dialector.Conn
	} else {
		db.ConnPool, err = sql.Open(dialector.DriverName, dialector.DSN)
		if err != nil {
			return err
		}
	}

	// for k, v := range dialector.ClauseBuilders() {
	// 	db.ClauseBuilders[k] = v
	// }
	return
}

// func (dialector Dialector) ClauseBuilders() map[string]clause.ClauseBuilder {
// 	return map[string]clause.ClauseBuilder{
// 		"LIMIT": func(c clause.Clause, builder clause.Builder) {
// 			if limit, ok := c.Expression.(clause.Limit); ok {
// 				if stmt, ok := builder.(*gorm.Statement); ok {
// 					if _, ok := stmt.Clauses["ORDER BY"]; !ok {
// 						if stmt.Schema != nil && stmt.Schema.PrioritizedPrimaryField != nil {
// 							builder.WriteString("ORDER BY ")
// 							builder.WriteQuoted(stmt.Schema.PrioritizedPrimaryField.DBName)
// 							builder.WriteByte(' ')
// 						} else {
// 							builder.WriteString("ORDER BY (SELECT NULL) ")
// 						}
// 					}
// 				}

// 				if limit.Offset > 0 {
// 					builder.WriteString("OFFSET ")
// 					builder.WriteString(strconv.Itoa(limit.Offset))
// 					builder.WriteString(" ROWS")
// 				}

// 				if limit.Limit != nil && *limit.Limit > 0 {
// 					if limit.Offset == 0 {
// 						builder.WriteString("OFFSET 0 ROW")
// 					}
// 					builder.WriteString(" FETCH NEXT ")
// 					builder.WriteString(strconv.Itoa(*limit.Limit))
// 					builder.WriteString(" ROWS ONLY")
// 				}
// 			}
// 		},
// 	}
// }

func (d Dialector) DefaultValueOf(field *schema.Field) clause.Expression {
	if field.AutoIncrement {
		return clause.Expr{SQL: "GENERATED BY DEFAULT AS IDENTITY"}
	}

	if field.DefaultValue == "" {
		return clause.Expr{SQL: "NULL"}
	}

	up := strings.ToUpper(field.DefaultValue)

	switch up {
	case "CURRENT_TIMESTAMP":
		return clause.Expr{SQL: "CURRENT_TIMESTAMP"}
	case "IDENTITY":
		return clause.Expr{SQL: "GENERATED BY DEFAULT AS IDENTITY"}
	default:
		if up == "TRUE" || up == "FALSE" {
			return clause.Expr{SQL: up}
		}

		if _, err := strconv.ParseFloat(field.DefaultValue, 64); err == nil {
			return clause.Expr{SQL: field.DefaultValue}
		}

		return clause.Expr{SQL: fmt.Sprintf("'%s'", field.DefaultValue)}
	}
}

func (dialector Dialector) Migrator(db *gorm.DB) gorm.Migrator {
	return Migrator{
		Migrator: migrator.Migrator{Config: migrator.Config{
			DB:        db,
			Dialector: dialector,
		}},
		CreateTableFunc:   dialector.Config.CreateTableFunc,
		HasTableFunc:      dialector.Config.HasTableFunc,
		ColumnTypesFunc:   dialector.Config.ColumnTypesFunc,
		AddColumnFunc:     dialector.Config.AddColumnFunc,
		MigrateColumnFunc: dialector.Config.MigrateColumnFunc,
	}
}

func (dialector Dialector) BindVarTo(writer clause.Writer, stmt *gorm.Statement, v interface{}) {
	writer.WriteByte('?')
}

func (dialector Dialector) QuoteTo(writer clause.Writer, str string) {
	writer.WriteString(strings.ToUpper(str))
}

func (dialector Dialector) Explain(sql string, vars ...interface{}) string {
	return logger.ExplainSQL(sql, nil, `'`, vars...)
}

func (dialector Dialector) DataTypeOf(field *schema.Field) string {
	switch field.DataType {
	case schema.Bool:
		return "BOOLEAN"
	case schema.Int, schema.Uint:
		if field.AutoIncrement {
			return "BIGINT IDENTITY(1,1)"
		}
		return "BIGINT"
	case schema.Float:
		return "FLOAT"
	case schema.String:
		size := field.Size
		hasIndex := field.TagSettings["INDEX"] != "" || field.TagSettings["UNIQUE"] != ""
		if (field.PrimaryKey || hasIndex) && size == 0 {
			size = 256
		}
		if size > 0 && size <= 4000 {
			return fmt.Sprintf("VARCHAR(%d)", size)
		}
		return "VARCHAR"
	case schema.Time:
		return "TIMESTAMP_NTZ"
	case schema.Bytes:
		return "VARBINARY"
	}

	return string(field.DataType)
}

// no support for savepoint
func (dialectopr Dialector) SavePoint(tx *gorm.DB, name string) error {
	return nil
}

func (dialectopr Dialector) RollbackTo(tx *gorm.DB, name string) error {
	tx.Exec("ROLLBACK TRANSACTION " + name)
	return nil
}
